/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package manning.devices.canonical.m2;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CanonicalErrorValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5265540044663618931L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CanonicalErrorValue\",\"namespace\":\"manning.devices.canonical.m2\",\"fields\":[{\"name\":\"stack_trace\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"raw_record_bytes\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.lang.CharSequence> stack_trace;
  @Deprecated public java.nio.ByteBuffer raw_record_bytes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public CanonicalErrorValue() {}

  /**
   * All-args constructor.
   */
  public CanonicalErrorValue(java.util.List<java.lang.CharSequence> stack_trace, java.nio.ByteBuffer raw_record_bytes) {
    this.stack_trace = stack_trace;
    this.raw_record_bytes = raw_record_bytes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stack_trace;
    case 1: return raw_record_bytes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stack_trace = (java.util.List<java.lang.CharSequence>)value$; break;
    case 1: raw_record_bytes = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'stack_trace' field.
   */
  public java.util.List<java.lang.CharSequence> getStackTrace() {
    return stack_trace;
  }

  /**
   * Sets the value of the 'stack_trace' field.
   * @param value the value to set.
   */
  public void setStackTrace(java.util.List<java.lang.CharSequence> value) {
    this.stack_trace = value;
  }

  /**
   * Gets the value of the 'raw_record_bytes' field.
   */
  public java.nio.ByteBuffer getRawRecordBytes() {
    return raw_record_bytes;
  }

  /**
   * Sets the value of the 'raw_record_bytes' field.
   * @param value the value to set.
   */
  public void setRawRecordBytes(java.nio.ByteBuffer value) {
    this.raw_record_bytes = value;
  }

  /**
   * Creates a new CanonicalErrorValue RecordBuilder.
   * @return A new CanonicalErrorValue RecordBuilder
   */
  public static manning.devices.canonical.m2.CanonicalErrorValue.Builder newBuilder() {
    return new manning.devices.canonical.m2.CanonicalErrorValue.Builder();
  }
  
  /**
   * Creates a new CanonicalErrorValue RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CanonicalErrorValue RecordBuilder
   */
  public static manning.devices.canonical.m2.CanonicalErrorValue.Builder newBuilder(manning.devices.canonical.m2.CanonicalErrorValue.Builder other) {
    return new manning.devices.canonical.m2.CanonicalErrorValue.Builder(other);
  }
  
  /**
   * Creates a new CanonicalErrorValue RecordBuilder by copying an existing CanonicalErrorValue instance.
   * @param other The existing instance to copy.
   * @return A new CanonicalErrorValue RecordBuilder
   */
  public static manning.devices.canonical.m2.CanonicalErrorValue.Builder newBuilder(manning.devices.canonical.m2.CanonicalErrorValue other) {
    return new manning.devices.canonical.m2.CanonicalErrorValue.Builder(other);
  }
  
  /**
   * RecordBuilder for CanonicalErrorValue instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CanonicalErrorValue>
    implements org.apache.avro.data.RecordBuilder<CanonicalErrorValue> {

    private java.util.List<java.lang.CharSequence> stack_trace;
    private java.nio.ByteBuffer raw_record_bytes;

    /** Creates a new Builder */
    private Builder() {
      super(manning.devices.canonical.m2.CanonicalErrorValue.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(manning.devices.canonical.m2.CanonicalErrorValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stack_trace)) {
        this.stack_trace = data().deepCopy(fields()[0].schema(), other.stack_trace);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.raw_record_bytes)) {
        this.raw_record_bytes = data().deepCopy(fields()[1].schema(), other.raw_record_bytes);
        fieldSetFlags()[1] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing CanonicalErrorValue instance
     * @param other The existing instance to copy.
     */
    private Builder(manning.devices.canonical.m2.CanonicalErrorValue other) {
            super(manning.devices.canonical.m2.CanonicalErrorValue.SCHEMA$);
      if (isValidValue(fields()[0], other.stack_trace)) {
        this.stack_trace = data().deepCopy(fields()[0].schema(), other.stack_trace);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.raw_record_bytes)) {
        this.raw_record_bytes = data().deepCopy(fields()[1].schema(), other.raw_record_bytes);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'stack_trace' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getStackTrace() {
      return stack_trace;
    }

    /**
      * Sets the value of the 'stack_trace' field.
      * @param value The value of 'stack_trace'.
      * @return This builder.
      */
    public manning.devices.canonical.m2.CanonicalErrorValue.Builder setStackTrace(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.stack_trace = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'stack_trace' field has been set.
      * @return True if the 'stack_trace' field has been set, false otherwise.
      */
    public boolean hasStackTrace() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stack_trace' field.
      * @return This builder.
      */
    public manning.devices.canonical.m2.CanonicalErrorValue.Builder clearStackTrace() {
      stack_trace = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'raw_record_bytes' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getRawRecordBytes() {
      return raw_record_bytes;
    }

    /**
      * Sets the value of the 'raw_record_bytes' field.
      * @param value The value of 'raw_record_bytes'.
      * @return This builder.
      */
    public manning.devices.canonical.m2.CanonicalErrorValue.Builder setRawRecordBytes(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.raw_record_bytes = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'raw_record_bytes' field has been set.
      * @return True if the 'raw_record_bytes' field has been set, false otherwise.
      */
    public boolean hasRawRecordBytes() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'raw_record_bytes' field.
      * @return This builder.
      */
    public manning.devices.canonical.m2.CanonicalErrorValue.Builder clearRawRecordBytes() {
      raw_record_bytes = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public CanonicalErrorValue build() {
      try {
        CanonicalErrorValue record = new CanonicalErrorValue();
        record.stack_trace = fieldSetFlags()[0] ? this.stack_trace : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        record.raw_record_bytes = fieldSetFlags()[1] ? this.raw_record_bytes : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}

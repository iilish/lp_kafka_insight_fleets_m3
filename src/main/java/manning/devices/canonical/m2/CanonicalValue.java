/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package manning.devices.canonical.m2;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CanonicalValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7571418323463211977L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CanonicalValue\",\"namespace\":\"manning.devices.canonical.m2\",\"fields\":[{\"name\":\"uuid\",\"type\":\"string\"},{\"name\":\"regionId\",\"type\":[\"null\",\"long\"]},{\"name\":\"arrival_time_ms\",\"type\":[\"null\",\"long\"]},{\"name\":\"event_time_ms\",\"type\":[\"null\",\"long\"]},{\"name\":\"events\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence uuid;
  @Deprecated public java.lang.Long regionId;
  @Deprecated public java.lang.Long arrival_time_ms;
  @Deprecated public java.lang.Long event_time_ms;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> events;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public CanonicalValue() {}

  /**
   * All-args constructor.
   */
  public CanonicalValue(java.lang.CharSequence uuid, java.lang.Long regionId, java.lang.Long arrival_time_ms, java.lang.Long event_time_ms, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> events) {
    this.uuid = uuid;
    this.regionId = regionId;
    this.arrival_time_ms = arrival_time_ms;
    this.event_time_ms = event_time_ms;
    this.events = events;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return regionId;
    case 2: return arrival_time_ms;
    case 3: return event_time_ms;
    case 4: return events;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.CharSequence)value$; break;
    case 1: regionId = (java.lang.Long)value$; break;
    case 2: arrival_time_ms = (java.lang.Long)value$; break;
    case 3: event_time_ms = (java.lang.Long)value$; break;
    case 4: events = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   */
  public java.lang.CharSequence getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.CharSequence value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'regionId' field.
   */
  public java.lang.Long getRegionId() {
    return regionId;
  }

  /**
   * Sets the value of the 'regionId' field.
   * @param value the value to set.
   */
  public void setRegionId(java.lang.Long value) {
    this.regionId = value;
  }

  /**
   * Gets the value of the 'arrival_time_ms' field.
   */
  public java.lang.Long getArrivalTimeMs() {
    return arrival_time_ms;
  }

  /**
   * Sets the value of the 'arrival_time_ms' field.
   * @param value the value to set.
   */
  public void setArrivalTimeMs(java.lang.Long value) {
    this.arrival_time_ms = value;
  }

  /**
   * Gets the value of the 'event_time_ms' field.
   */
  public java.lang.Long getEventTimeMs() {
    return event_time_ms;
  }

  /**
   * Sets the value of the 'event_time_ms' field.
   * @param value the value to set.
   */
  public void setEventTimeMs(java.lang.Long value) {
    this.event_time_ms = value;
  }

  /**
   * Gets the value of the 'events' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getEvents() {
    return events;
  }

  /**
   * Sets the value of the 'events' field.
   * @param value the value to set.
   */
  public void setEvents(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.events = value;
  }

  /**
   * Creates a new CanonicalValue RecordBuilder.
   * @return A new CanonicalValue RecordBuilder
   */
  public static manning.devices.canonical.m2.CanonicalValue.Builder newBuilder() {
    return new manning.devices.canonical.m2.CanonicalValue.Builder();
  }
  
  /**
   * Creates a new CanonicalValue RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CanonicalValue RecordBuilder
   */
  public static manning.devices.canonical.m2.CanonicalValue.Builder newBuilder(manning.devices.canonical.m2.CanonicalValue.Builder other) {
    return new manning.devices.canonical.m2.CanonicalValue.Builder(other);
  }
  
  /**
   * Creates a new CanonicalValue RecordBuilder by copying an existing CanonicalValue instance.
   * @param other The existing instance to copy.
   * @return A new CanonicalValue RecordBuilder
   */
  public static manning.devices.canonical.m2.CanonicalValue.Builder newBuilder(manning.devices.canonical.m2.CanonicalValue other) {
    return new manning.devices.canonical.m2.CanonicalValue.Builder(other);
  }
  
  /**
   * RecordBuilder for CanonicalValue instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CanonicalValue>
    implements org.apache.avro.data.RecordBuilder<CanonicalValue> {

    private java.lang.CharSequence uuid;
    private java.lang.Long regionId;
    private java.lang.Long arrival_time_ms;
    private java.lang.Long event_time_ms;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> events;

    /** Creates a new Builder */
    private Builder() {
      super(manning.devices.canonical.m2.CanonicalValue.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(manning.devices.canonical.m2.CanonicalValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.regionId)) {
        this.regionId = data().deepCopy(fields()[1].schema(), other.regionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.arrival_time_ms)) {
        this.arrival_time_ms = data().deepCopy(fields()[2].schema(), other.arrival_time_ms);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.event_time_ms)) {
        this.event_time_ms = data().deepCopy(fields()[3].schema(), other.event_time_ms);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.events)) {
        this.events = data().deepCopy(fields()[4].schema(), other.events);
        fieldSetFlags()[4] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing CanonicalValue instance
     * @param other The existing instance to copy.
     */
    private Builder(manning.devices.canonical.m2.CanonicalValue other) {
            super(manning.devices.canonical.m2.CanonicalValue.SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.regionId)) {
        this.regionId = data().deepCopy(fields()[1].schema(), other.regionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.arrival_time_ms)) {
        this.arrival_time_ms = data().deepCopy(fields()[2].schema(), other.arrival_time_ms);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.event_time_ms)) {
        this.event_time_ms = data().deepCopy(fields()[3].schema(), other.event_time_ms);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.events)) {
        this.events = data().deepCopy(fields()[4].schema(), other.events);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.CharSequence getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public manning.devices.canonical.m2.CanonicalValue.Builder setUuid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public manning.devices.canonical.m2.CanonicalValue.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'regionId' field.
      * @return The value.
      */
    public java.lang.Long getRegionId() {
      return regionId;
    }

    /**
      * Sets the value of the 'regionId' field.
      * @param value The value of 'regionId'.
      * @return This builder.
      */
    public manning.devices.canonical.m2.CanonicalValue.Builder setRegionId(java.lang.Long value) {
      validate(fields()[1], value);
      this.regionId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'regionId' field has been set.
      * @return True if the 'regionId' field has been set, false otherwise.
      */
    public boolean hasRegionId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'regionId' field.
      * @return This builder.
      */
    public manning.devices.canonical.m2.CanonicalValue.Builder clearRegionId() {
      regionId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrival_time_ms' field.
      * @return The value.
      */
    public java.lang.Long getArrivalTimeMs() {
      return arrival_time_ms;
    }

    /**
      * Sets the value of the 'arrival_time_ms' field.
      * @param value The value of 'arrival_time_ms'.
      * @return This builder.
      */
    public manning.devices.canonical.m2.CanonicalValue.Builder setArrivalTimeMs(java.lang.Long value) {
      validate(fields()[2], value);
      this.arrival_time_ms = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'arrival_time_ms' field has been set.
      * @return True if the 'arrival_time_ms' field has been set, false otherwise.
      */
    public boolean hasArrivalTimeMs() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'arrival_time_ms' field.
      * @return This builder.
      */
    public manning.devices.canonical.m2.CanonicalValue.Builder clearArrivalTimeMs() {
      arrival_time_ms = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'event_time_ms' field.
      * @return The value.
      */
    public java.lang.Long getEventTimeMs() {
      return event_time_ms;
    }

    /**
      * Sets the value of the 'event_time_ms' field.
      * @param value The value of 'event_time_ms'.
      * @return This builder.
      */
    public manning.devices.canonical.m2.CanonicalValue.Builder setEventTimeMs(java.lang.Long value) {
      validate(fields()[3], value);
      this.event_time_ms = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'event_time_ms' field has been set.
      * @return True if the 'event_time_ms' field has been set, false otherwise.
      */
    public boolean hasEventTimeMs() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'event_time_ms' field.
      * @return This builder.
      */
    public manning.devices.canonical.m2.CanonicalValue.Builder clearEventTimeMs() {
      event_time_ms = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'events' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getEvents() {
      return events;
    }

    /**
      * Sets the value of the 'events' field.
      * @param value The value of 'events'.
      * @return This builder.
      */
    public manning.devices.canonical.m2.CanonicalValue.Builder setEvents(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.events = value;
      fieldSetFlags()[4] = true;
      return this; 
    }

    /**
      * Checks whether the 'events' field has been set.
      * @return True if the 'events' field has been set, false otherwise.
      */
    public boolean hasEvents() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'events' field.
      * @return This builder.
      */
    public manning.devices.canonical.m2.CanonicalValue.Builder clearEvents() {
      events = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public CanonicalValue build() {
      try {
        CanonicalValue record = new CanonicalValue();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.regionId = fieldSetFlags()[1] ? this.regionId : (java.lang.Long) defaultValue(fields()[1]);
        record.arrival_time_ms = fieldSetFlags()[2] ? this.arrival_time_ms : (java.lang.Long) defaultValue(fields()[2]);
        record.event_time_ms = fieldSetFlags()[3] ? this.event_time_ms : (java.lang.Long) defaultValue(fields()[3]);
        record.events = fieldSetFlags()[4] ? this.events : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
